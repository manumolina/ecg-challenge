[tool.poetry]
name = "idoven-challenge"
version = "0.1.0"
description = ""
authors = ["Manu Molina <manu.molinam@gmail.com>"]
readme = "README.md"

[tool.pytest.ini_options]
pythonpath = [
  "."
]

[tool.coverage.run]
branch = true
omit = [
    "*/main.py",         # skip main files
    "tests/*",         # skip tests
]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 90
exclude_also = [
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 90
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "C90", # mccabe
    "F",   # pyflakes
    "I",   # isort
    "D",   #pydocstyle
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    # "ANN", # flake8-annotations - Skip for now since it's difficult to standardize.
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    # "A", # flake8-builtins - skip for now, but interesting to consider in the future.
    "COM", # flake8-commas
    # "DTZ", # flake8-datetimez - skip, doesn't seem important for now
    "T10", # flake8-debugger
    # "DJ",  # flake8-django - we don't use django
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    # "ARG", # flake8-unused-arguments - causes more trouble then value
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    # "PD",  # pandas-vet - pandas not used
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    # "NPY", # NumPy-specific rules - we don't currently use numpy
    "RUF", # Ruff-specific rules
]
ignore = [
    "B008",   # do not perform function calls in argument defaults
    "PT004",  # fixtures with leading _ are silently ignored if autouse is True
    "PT007",  # pytest row should also be able to use pytest.param values
    "D1",     # we don't currently enforce docstrings
    "D417",   # we don't currently enforce docstrings
    "D203",   # resolve incompatibility with D211
    "D213",   # resolve incompatibility with D212,
    "FBT003", # sometimes 3rd parties introduce boolean traps and we need to adjust
    "TRY301", # more trouble then value.
]
ignore-init-module-imports = true

[tool.ruff.per-file-ignores]
"tests/*" = ["SLF001", "PLR2004", "PLR0913", "S"]
"*tests/*" = ["SLF001", "PLR2004", "PLR0913", "S"]
"*/__init__.py" = ["PLC0414"]

